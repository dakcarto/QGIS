#include "qgs_oauth_plugin.h"
#include "qgs_oauth_widget.h"

#include <QMenu>

static const QString sName = QObject::tr( "OAuth Test Plugin" );
static const QString sDescription = QObject::tr( "Test OAuth authentication" );
static const QString sCategory = QObject::tr( "Layers" );
static const QString sPluginVersion = QObject::tr( "Version 0.1" );
static const QgisPlugin::PLUGINTYPE sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = "";

//////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING METHODS ARE MANDATORY FOR ALL PLUGINS
//
//////////////////////////////////////////////////////////////////////

/**
 * Constructor for the plugin. The plugin is passed a pointer
 * an interface object that provides access to exposed functions in QGIS.
 * @param theQGisInterface - Pointer to the QGIS interface object
 */
QgsOAuthTestPlugin::QgsOAuthTestPlugin( QgisInterface * theQgisInterface )
    : QgisPlugin( sName, sDescription, sCategory, sPluginVersion, sPluginType )
    , mQGisIface( theQgisInterface )
    , mQActionPointer( nullptr )
{
}

QgsOAuthTestPlugin::~QgsOAuthTestPlugin()
{
}

/*
 * Initialize the GUI interface for the plugin - this is only called once when the plugin is
 * added to the plugin registry in the QGIS application.
 */
void QgsOAuthTestPlugin::initGui()
{
  // Create the action for tool
  mQActionPointer = new QAction( QIcon(), tr( "Run..." ), this );
  mQActionPointer->setObjectName( "mQActionPointer" );
  // Connect the action to the run
  connect( mQActionPointer, SIGNAL( triggered() ), this, SLOT( run() ) );

  // Also add to Layer menu
  mQGisIface->addPluginToMenu(sName, mQActionPointer );
}
//method defined in interface

void QgsOAuthTestPlugin::help()
{
  //implement me!
}

// Slot called when the menu item is triggered
// If you created more menu items / toolbar buttons in initiGui, you should
// create a separate handler for each action - this single run() method will
// not be enough

void QgsOAuthTestPlugin::run()
{  
  // load test widget
  TestWidget * mTestPage = new TestWidget();
  mTestPage->show();
  mTestPage->raise();
  mTestPage->activateWindow();
  mTestPage->resize(800, 512);
}

// Unload the plugin by cleaning up the GUI

void QgsOAuthTestPlugin::unload()
{
  // remove the GUI
  mQGisIface->removePluginMenu( sName, mQActionPointer );
  delete mQActionPointer;
  mQActionPointer = nullptr;
}


//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////


/**
 * Required extern functions needed  for every plugin
 * These functions can be called prior to creating an instance
 * of the plugin class
 */
// Class factory to return a new instance of the plugin class

QGISEXTERN QgisPlugin * classFactory( QgisInterface * theQgisInterfacePointer )
{
  return new QgsOAuthTestPlugin( theQgisInterfacePointer );
}
// Return the name of the plugin - note that we do not user class members as
// the class may not yet be insantiated when this method is called.

QGISEXTERN QString name()
{
  return sName;
}

// Return the description

QGISEXTERN QString description()
{
  return sDescription;
}

// Return the description

QGISEXTERN QString category()
{
  return sCategory;
}

// Return the type (either UI or MapLayer plugin)

QGISEXTERN int type()
{
  return sPluginType;
}

// Return the version number for the plugin

QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

// Delete ourself

QGISEXTERN void unload( QgisPlugin * thePluginPointer )
{
  delete thePluginPointer;
}
